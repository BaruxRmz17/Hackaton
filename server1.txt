from flask import Flask, Response, render_template
from flask_socketio import SocketIO, emit
import cv2
import dlib
import numpy as np
from scipy.spatial import distance as dist
from playsound import playsound
import time

app = Flask(__name__)
socketio = SocketIO(app)

# Funciones de cálculo
def calculate_ear(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

def calculate_head_tilt(landmarks):
    nose = landmarks[30]
    left_eye = landmarks[36]
    right_eye = landmarks[45]
    eye_center = ((left_eye[0] + right_eye[0]) // 2, (left_eye[1] + right_eye[1]) // 2)
    delta_x = nose[0] - eye_center[0]
    delta_y = nose[1] - eye_center[1]
    angle = np.degrees(np.arctan2(delta_y, delta_x))
    return angle

# Configuración inicial
EAR_THRESHOLD = 0.25
EAR_CONSEC_FRAMES = 20
TILT_THRESHOLD = 30
TILT_CONSEC_FRAMES = 20
COUNTER_EAR = 0
COUNTER_TILT = 0
last_ear_check = time.time()

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
LEFT_EYE = list(range(36, 42))
RIGHT_EYE = list(range(42, 48))

cap = cv2.VideoCapture(0)

def generate_frames():
    global COUNTER_EAR, COUNTER_TILT, last_ear_check
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = detector(gray)

        alert_message = None
        ear_value = None
        tilt_value = None

        for face in faces:
            landmarks = predictor(gray, face)
            landmarks = np.array([[p.x, p.y] for p in landmarks.parts()])

            left_eye = landmarks[LEFT_EYE]
            right_eye = landmarks[RIGHT_EYE]
            left_ear = calculate_ear(left_eye)
            right_ear = calculate_ear(right_eye)
            ear = (left_ear + right_ear) / 2.0
            tilt_angle = calculate_head_tilt(landmarks)

            # Dibujar contornos
            cv2.polylines(frame, [left_eye], True, (0, 255, 0), 1)
            cv2.polylines(frame, [right_eye], True, (0, 255, 0), 1)

            # Lógica de detección
            if ear < EAR_THRESHOLD:
                COUNTER_EAR += 1
                if COUNTER_EAR >= EAR_CONSEC_FRAMES:
                    current_time = time.time()
                    if current_time - last_ear_check > 1:
                        playsound("alert.wav", block=False)
                        last_ear_check = current_time
                    alert_message = "OJOS CERRADOS"
                    cv2.putText(frame, "ALERTA: OJOS CERRADOS", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            else:
                COUNTER_EAR = 0

            if abs(tilt_angle) > TILT_THRESHOLD:
                COUNTER_TILT += 1
                if COUNTER_TILT >= TILT_CONSEC_FRAMES and COUNTER_EAR < EAR_CONSEC_FRAMES:
                    alert_message = "CABEZA INCLINADA"
                    cv2.putText(frame, "ALERTA: CABEZA INCLINADA", (10, 60),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            else:
                COUNTER_TILT = 0

            ear_value = ear
            tilt_value = tilt_angle

            # Mostrar métricas en el frame
            cv2.putText(frame, f"EAR: {ear:.2f}", (300, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"Tilt: {tilt_angle:.2f}", (300, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

        # Enviar datos al frontend vía SocketIO
        socketio.emit('update', {
            'ear': round(ear_value, 2) if ear_value else 0,
            'tilt': round(tilt_value, 2) if tilt_value else 0,
            'alert': alert_message
        })

        # Codificar frame como JPEG
        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\n'
            b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/')
def index():
    return "Backend running. Connect from React frontend."

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=8080)